// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	"fmt"

	gin "github.com/gin-gonic/gin"
	jwt "github.com/golang-jwt/jwt"

	middleware "github.com/sourabhmandal/middleware-lib"

	mock "github.com/stretchr/testify/mock"
)

// middlewareInterface is an autogenerated mock type for the middlewareInterface type
type middlewareInterface struct {
	mock.Mock
}

var MiddlewareMock = &middlewareInterface{}

// GetUserID provides a mock function with given fields: baseUrl, userEmail
func (_m *middlewareInterface) GetUserID(baseUrl string, userEmail string) middleware.GetUserIDResponse {
	ret := _m.Called(baseUrl, userEmail)

	var r0 middleware.GetUserIDResponse
	if rf, ok := ret.Get(0).(func(string, string) middleware.GetUserIDResponse); ok {
		r0 = rf(baseUrl, userEmail)
	} else {
		r0 = ret.Get(0).(middleware.GetUserIDResponse)
	}

	return r0
}

// SetCors provides a mock function with given fields: _a0
func (_m *middlewareInterface) SetCors(_a0 *gin.Engine) {
	_m.Called(_a0)
}

// VerifyJwtToken provides a mock function with given fields: _a0, _a1
func (_m *middlewareInterface) VerifyJwtToken(_a0 *gin.Context, _a1 string) (bool, jwt.MapClaims, int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gin.Context, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 jwt.MapClaims
	if rf, ok := ret.Get(1).(func(*gin.Context, string) jwt.MapClaims); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(jwt.MapClaims)
		}
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(*gin.Context, string) int); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*gin.Context, string) error); ok {
		r3 = rf(_a0, _a1)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// VerifyJwtTokenV2 provides a mock function with given fields: c, authServiceBaseUrl
func (_m *middlewareInterface) VerifyJwtTokenV2(c *gin.Context, authServiceBaseUrl string) bool {
	fmt.Println("VERIFY MOCK")
	
	ret := _m.Called(c, authServiceBaseUrl)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gin.Context, string) bool); ok {
		r0 = rf(c, authServiceBaseUrl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTnewMiddlewareInterface interface {
	mock.TestingT
	Cleanup(func())
}

// newMiddlewareInterface creates a new instance of middlewareInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMiddlewareInterface(t mockConstructorTestingTnewMiddlewareInterface) *middlewareInterface {
	mock := &middlewareInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
